import 'package:firebase_core/firebase_core.dart';
import 'firebase_options.dart';  // This file should be generated by flutterfire configure
import 'package:firebase_auth/firebase_auth.dart';
import 'package:cloud_firestore/cloud_firestore.dart';

void main() async {
  WidgetsFlutterBinding.ensureInitialized();
  await Firebase.initializeApp(
    options: DefaultFirebaseOptions.currentPlatform, // Initialize Firebase for the correct platform
  );
  runApp(MyApp());
}
 flu
 class MyApp extends StatelessWidget {
@override
Widget build(BuildContext context) {
return MaterialApp(
title: 'Firebase Auth App',
theme: ThemeData(
primarySwatch: Colors.blue,
),
home: AuthPage(),
);
}
}

class AuthPage extends StatefulWidget {
@override
_AuthPageState createState() => _AuthPageState();
}

class _AuthPageState extends State<AuthPage> {
final TextEditingController emailController = TextEditingController();
final TextEditingController passwordController = TextEditingController();
bool isLogin = true;

Future<void> handleAuth() async {
try {
if (isLogin) {
await FirebaseAuth.instance.signInWithEmailAndPassword(
email: emailController.text,
password: passwordController.text,
);
} else {
UserCredential userCredential = await FirebaseAuth.instance.createUserWithEmailAndPassword(
email: emailController.text,
password: passwordController.text,
);
await FirebaseFirestore.instance
    .collection('users')
    .doc(userCredential.user!.uid)
    .set({ 'email': emailController.text });
}
} on FirebaseAuthException catch (e) {
ScaffoldMessenger.of(context).showSnackBar(SnackBar(content: Text(e.message ?? 'Auth Error')));
}
}

@override
Widget build(BuildContext context) {
return Scaffold(
appBar: AppBar(title: Text(isLogin ? 'Login' : 'Register')),
body: Padding(
padding: const EdgeInsets.all(16.0),
child: Column(
mainAxisAlignment: MainAxisAlignment.center,
children: [
TextField(
controller: emailController,
decoration: InputDecoration(labelText: 'Email'),
),
TextField(
controller: passwordController,
decoration: InputDecoration(labelText: 'Password'),
obscureText: true,
),
SizedBox(height: 16),
ElevatedButton(
onPressed: handleAuth,
child: Text(isLogin ? 'Login' : 'Register'),
),
TextButton(
onPressed: () => setState(() => isLogin = !isLogin),
child: Text(isLogin ? 'Don\'t have an account? Register' : 'Already have an account? Login'),
)
],
),
),
);
}
}

class HomePage extends StatelessWidget {
final User? user = FirebaseAuth.instance.currentUser;

@override
Widget build(BuildContext context) {
return Scaffold(
appBar: AppBar(
title: Text('Home'),
actions: [
IconButton(
icon: Icon(Icons.logout),
onPressed: () async {
await FirebaseAuth.instance.signOut();
Navigator.of(context).pushAndRemoveUntil(
MaterialPageRoute(builder: (context) => AuthPage()),
(route) => false,
);
},
)
],
),
body: Center(
child: Text('Welcome, ${user?.email ?? 'User'}', style: TextStyle(fontSize: 18)),
),
);
}
}

// Add auth state listener
class AuthWrapper extends StatelessWidget {
@override
Widget build(BuildContext context) {
return StreamBuilder<User?>(
stream: FirebaseAuth.instance.authStateChanges(),
builder: (context, snapshot) {
if (snapshot.connectionState == ConnectionState.waiting) {
return CircularProgressIndicator();
}
if (snapshot.hasData) {
return HomePage();
}
return AuthPage();
},
);
}
}
